#+begin_src jupyter-python
import proplot as plt, cmasher as cmr, pandas as pd,\
    numpy as np, os, sys, networkx as nx, warnings
from plexsim import models
from imi import infcy
from utils import ccolors
n = len(g)
c = ccolors(n)

fp = "kite_intervention_beta=0.5732374683235916.pkl"
inv = pd.read_pickle(fp)
fig, ax = plt.subplots(ncols = 2, share = 0)
for node, dfi in inv.groupby("node"):
    sim = np.stack(dfi.sim).squeeze()
    ci = c[node]; label = node
    if node == -1:
        ci = "tab:blue"; label = "Control"
    ax[0].plot(sim.mean(1) ,
            label = label,
            color = ci,
            linestyle = "dashed",
            # marker = 'o'
               zorder = 0 if node != -1 else 10,
            )
nx.draw(g, pos = nx.kamada_kawai_layout(g),
        ax = ax[1],
        with_labels = 1,
        node_color = c)
ax[0].format(
    # yscale = "log",
    # xscale = "log"
    xlabel = "Time(t)",
    ylabel = "$E[M(S^t)]$"
)
ax[1].axis("equal")
ax[0].legend(loc = 'r', ncols = 1, title = "Intervention on")
# fig.savefig("./figures/exact_kite_intervention.png")
# fig.savefig("./figures/exact_kite_intervention.png")
fig.show()
#+end_src


#+begin_src jupyter-python
from exact_utils import fit_curve
fp = "./data/exact_kite_dyn=ising_beta=0.5732374683235916_T=200.pkl"
# fp = "./data/exact_small_tree_dyn=ising_beta=0.9001444450539172_T=200.pkl"
df = pd.read_pickle(fp)
f = lambda x, a, b, c, d, g: a * np.exp(-b * x) + c * np.exp(-d * x) + g
ndf = fit_curve(df, f, offset = True)
#+end_src

#+RESULTS:
#+begin_example
/tmp/ipykernel_827725/2370833727.py:5: RuntimeWarning: overflow encountered in exp
  f = lambda x, a, b, c, d, g: a * np.exp(-b * x) + c * np.exp(-d * x) + g
/home/casper/miniconda3/lib/python3.9/site-packages/scipy/optimize/_numdiff.py:576: RuntimeWarning: invalid value encountered in subtract
  df = fun(x) - f0
/tmp/ipykernel_827725/2370833727.py:5: RuntimeWarning: overflow encountered in exp
  f = lambda x, a, b, c, d, g: a * np.exp(-b * x) + c * np.exp(-d * x) + g
/home/casper/miniconda3/lib/python3.9/site-packages/scipy/optimize/_numdiff.py:576: RuntimeWarning: invalid value encountered in subtract
  df = fun(x) - f0
/tmp/ipykernel_827725/2370833727.py:5: RuntimeWarning: overflow encountered in exp
  f = lambda x, a, b, c, d, g: a * np.exp(-b * x) + c * np.exp(-d * x) + g
/home/casper/orgfiles/roam/papers/Metastability/utils.py:45: IntegrationWarning: The integral is probably divergent, or slowly convergent.
  imi, _ = integrate.quad(int_f, 0, np.inf, args=(coeffs,))
0.95000000000000011.05/tmp/ipykernel_827725/2370833727.py:5: RuntimeWarning: overflow encountered in exp
  f = lambda x, a, b, c, d, g: a * np.exp(-b * x) + c * np.exp(-d * x) + g
/home/casper/miniconda3/lib/python3.9/site-packages/scipy/optimize/_numdiff.py:576: RuntimeWarning: invalid value encountered in subtract
  df = fun(x) - f0
/tmp/ipykernel_827725/2370833727.py:5: RuntimeWarning: overflow encountered in exp
  f = lambda x, a, b, c, d, g: a * np.exp(-b * x) + c * np.exp(-d * x) + g
#+end_example


#+begin_src jupyter-python
d = np.stack(inv.sim).mean(-1)
# d = np.std(d, axis = 1)
d = np.sqrt(((d - d[-1])**2).sum(-1))
asy = np.stack(ndf.asymp)
imi = np.stack(ndf.imi)
print(asy.shape, d.shape)
#+end_src

#+RESULTS:
: (12, 10) (11,)

#+begin_src jupyter-python
idx = 5
m = ndf.mag.iloc[idx]
fig, ax = plt.subplots(ncols = 2, share = 0)
ax[0].scatter(imi[idx], d[:-1], c = c)
ax[1].scatter(asy[idx], d[:-1], c = c)
ax.set_title(f"{m-0.05:0.2f}")

ax[0].set_xlabel(xlabel = "Adjusted integrated mutual information ($\overline{\mu}(s_i)$)")
ax[1].set_xlabel(xlabel = "Asymptotic information ($\omega$)")

ax.format(
    ylabel = "L2",
    # yscale = "log"
)
fig.show()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
File ~/miniconda3/lib/python3.9/site-packages/matplotlib/axes/_axes.py:4330, in Axes._parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func)
   4329 try:  # Is 'c' acceptable as PathCollection facecolors?
-> 4330     colors = mcolors.to_rgba_array(c)
   4331 except (TypeError, ValueError) as err:

File ~/miniconda3/lib/python3.9/site-packages/matplotlib/colors.py:385, in to_rgba_array(c, alpha)
    384 else:
--> 385     rgba = np.array([to_rgba(cc) for cc in c])
    387 if alpha is not None:

File ~/miniconda3/lib/python3.9/site-packages/matplotlib/colors.py:385, in <listcomp>(.0)
    384 else:
--> 385     rgba = np.array([to_rgba(cc) for cc in c])
    387 if alpha is not None:

File ~/miniconda3/lib/python3.9/site-packages/matplotlib/colors.py:206, in to_rgba(c, alpha)
    205 if rgba is None:  # Suppress exception chaining of cache lookup failure.
--> 206     rgba = _to_rgba_no_colorcycle(c, alpha)
    207     try:

File ~/miniconda3/lib/python3.9/site-packages/matplotlib/colors.py:284, in _to_rgba_no_colorcycle(c, alpha)
    283 if not np.iterable(c):
--> 284     raise ValueError(f"Invalid RGBA argument: {orig_c!r}")
    285 if len(c) not in [3, 4]:

ValueError: Invalid RGBA argument: 0.00024168250894618994

The above exception was the direct cause of the following exception:

ValueError                                Traceback (most recent call last)
Input In [51], in <cell line: 4>()
      2 m = ndf.mag.iloc[idx]
      3 fig, ax = plt.subplots(ncols = 2, share = 0)
----> 4 ax[0].scatter(imi[idx], d[:-1], c = c)
      5 ax[1].scatter(asy[idx], d[:-1], c = c)
      6 ax.set_title(f"{m-0.05:0.2f}")

File ~/miniconda3/lib/python3.9/site-packages/proplot/internals/process.py:284, in _preprocess_args.<locals>.decorator.<locals>._redirect_or_standardize(self, *args, **kwargs)
    281             ureg.setup_matplotlib(True)
    283 # Call main function
--> 284 return func(self, *args, **kwargs)

File ~/miniconda3/lib/python3.9/site-packages/proplot/axes/plot.py:3259, in PlotAxes.scatter(self, *args, **kwargs)
   3255 """
   3256 %(plot.scatter)s
   3257 """
   3258 kwargs = _parse_vert(default_vert=True, **kwargs)
-> 3259 return self._apply_scatter(*args, **kwargs)

File ~/miniconda3/lib/python3.9/site-packages/proplot/axes/plot.py:3232, in PlotAxes._apply_scatter(self, xs, ys, ss, cc, vert, **kwargs)
   3230 if not vert:
   3231     x, y = y, x
-> 3232 obj = self._plot_native('scatter', x, y, **kw)
   3233 self._inbounds_xylim(extents, x, y)
   3234 objs.append((*eb, *es, obj) if eb or es else obj)

File ~/miniconda3/lib/python3.9/site-packages/proplot/axes/plot.py:1275, in PlotAxes._plot_native(self, name, *args, **kwargs)
   1273         obj = getattr(self.projection, name)(*args, ax=self, **kwargs)
   1274     else:
-> 1275         obj = getattr(super(), name)(*args, **kwargs)
   1276 return obj

File ~/miniconda3/lib/python3.9/site-packages/matplotlib/__init__.py:1352, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)
   1349 @functools.wraps(func)
   1350 def inner(ax, *args, data=None, **kwargs):
   1351     if data is None:
-> 1352         return func(ax, *map(sanitize_sequence, args), **kwargs)
   1354     bound = new_sig.bind(ax, *args, **kwargs)
   1355     auto_label = (bound.arguments.get(label_namer)
   1356                   or bound.kwargs.get(label_namer))

File ~/miniconda3/lib/python3.9/site-packages/matplotlib/axes/_axes.py:4496, in Axes.scatter(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, **kwargs)
   4493 if edgecolors is None:
   4494     orig_edgecolor = kwargs.get('edgecolor', None)
   4495 c, colors, edgecolors = \
-> 4496     self._parse_scatter_color_args(
   4497         c, edgecolors, kwargs, x.size,
   4498         get_next_color_func=self._get_patches_for_fill.get_next_color)
   4500 if plotnonfinite and colors is None:
   4501     c = np.ma.masked_invalid(c)

File ~/miniconda3/lib/python3.9/site-packages/matplotlib/axes/_axes.py:4336, in Axes._parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func)
   4334 else:
   4335     if not valid_shape:
-> 4336         raise invalid_shape_exception(c.size, xsize) from err
   4337     # Both the mapping *and* the RGBA conversion failed: pretty
   4338     # severe failure => one may appreciate a verbose feedback.
   4339     raise ValueError(
   4340         f"'c' argument must be a color, a sequence of colors, "
   4341         f"or a sequence of numbers, not {c}") from err

ValueError: 'c' argument has 6 elements, which is inconsistent with 'x' and 'y' with size 10.
virtual void QEventDispatcherUNIX::registerSocketNotifier(QSocketNotifier*): Multiple socket notifiers for same socket 11 and type Read
#+end_example
:END:

#+begin_src jupyter-python
s = np.stack(ndf.imi)
ss = np.stack(ndf.asymp)

print(sss[-1])
print(sss.shape, s.shape, ss.shape, d.shape)
#+end_src

#+RESULTS:
: [0.00119208 0.01391473 0.01391473 0.01391473 0.03605602 0.03605602
:  0.03605602 0.03605602 0.03605602 0.03605602]
: (11, 10) (12, 10) (12, 10) (11,)

#+begin_src jupyter-python
s = np.stack(ndf.imi)
ss = np.stack(ndf.asymp)
sss = d[:-1][None, :] * np.ones(s[:-1].shape)

S = np.array([s[:-1], ss[:-1], sss])

from sklearn.preprocessing import minmax_scale
from utils import ccolors
c = ccolors(len(g))
g = df.attrs["settings"].g
pos = nx.kamada_kawai_layout(g)
from matplotlib import pyplot as pplt
fig, ax = pplt.subplots(ncols = 5, nrows = 3)
targets = [0.1, 0.2, 0.3, 0.4, 0.5]

mag = (df.mag.values - 0.05).round(2)
for idx, t in enumerate(targets):
    for jdx, s in enumerate(S):
        kdx = np.where(mag == t)[0][0]
        SS = s[kdx]
        SS /= SS.max()
        nx.draw(g, pos,
            ax = ax[jdx, idx],
            node_size = SS * 30,
            node_color = c)
        ax[jdx, idx].axis("equal")
    ax[0, idx].set_title(t)
fig.suptitle("System stability\nFraction of nodes in +1",
             # y = 1.02
             )
fig.tight_layout()
# ax.axis("square")
# ax.format()
fig.show()
#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_566013/3367939822.py:34: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 640 :height 480
[[file:./.ob-jupyter/68952819e5c32e0230bc59af9e765de66ee32520.png]]
:END:
akasdfslk
#+begin_src jupyter-python
# np.random.seed(0)
from tqdm import tqdm
import proplot as plt, cmasher as cmr, pandas as pd,\
    numpy as np, os, sys, networkx as nx, warnings
from plexsim import models
from imi import infcy

g = nx.krackhardt_kite_graph()
beta = 0.5732374683235916
# g = small_tree()
# beta = 0.9001444450539172

# from experiment import small_tree_cross
# small_tree_cross()


# beta = 1e-10
seed = 1234
# seed  = 51
# np.random.seed(seed)
n = len(g)
n = 1
# m.states = 0
M = 10000

from utils import ccolors
c = ccolors(len(g))
m = models.Potts(g, t = 1/beta, sampleSize = n, seed = seed)
m.states = 0
S = m.simulate(M)

fig, ax = plt.subplots()
ax.plot(S.mean(1), label = "Control", lw = 0.5)

for node in tqdm(g.nodes()):
    m = models.Potts(g, t = 1/beta, sampleSize = n, seed = seed)
    m.states = 0
    m.nudges = {node: np.inf}
    s = m.simulate(M)
    d = np.sqrt((s.mean(1) - S.mean(1))**2)
    # print(np.where(s.mean(1) == 0.5)[0])
    ss = s.mean(1)
    label = node
    if node == -1:
        label = "Control"
    ax.plot( ss + 1.2 + node, label = label, color = c[node],
            lw = 0.5)

ax.legend(loc = 'r', ncols = 1, title = "Intervention on")
# ax.axhline(0.5)
ax.format(xlabel = "Time (t)", yticklabels = [])
fig.savefig("./figures/kite_intervention.png")
fig.show()
#+end_src

#+RESULTS:
:RESULTS:
: 100% 10/10 [00:00<00:00, 47.53it/s]
: /tmp/ipykernel_873244/3633168806.py:53: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 369 :height 300
[[file:./.ob-jupyter/a81602c6d2db760dd34e514218c0a4c1d43b7066.png]]
:END:

#+begin_src jupyter-python
ISI = pd.read_pickle("kite_isi_beta=0.5732374683235916.pkl")

fig, ax = plt.subplots()
for idx, row in ISI[ISI.label == "control"].iterrows():
    ax.hist(row.isi, bins = 20)
ax.format(yscale = "log")
#+end_src

#+RESULTS:
: virtual void QEventDispatcherUNIX::registerSocketNotifier(QSocketNotifier*): Multiple socket notifiers for same socket 11 and type Read

#+begin_src jupyter-python
from utils import ccolors
fp = "./data/exact_kite_dyn=ising_beta=0.5732374683235916_T=200.pkl"
df = pd.read_pickle(fp)
g = df.attrs["settings"].g
pos = nx.kamada_kawai_layout(g)
beta = 0.5732374683235916
m = models.Potts(g, t = 1/beta, sampleSize = 1)

c = ccolors(m.nStates)
s = m.simulate(1e5)

%matplotlib qt5
fig, ax = plt.subplots(ncols = 2, share = 0,
                       width_ratios = [ 0.3, 0.7],
                       # dpi = 50
                       )
h = nx.draw(g, pos, ax = ax[0])
ax[0].axis("equal")
ax[1].plot(s.mean(1))

tracker = ax[1].axvline(0, color = 'k', linestyle = 'dashed')
nodes = ax[0].collections[0]
idx = 0
text = fig.suptitle("")
while True:
    nodes.set_color(c[s[idx].astype(int)])
    tracker.set_xdata((idx, idx))
    fig.canvas.start_event_loop(1e-16)
    fig.canvas.draw()
    idx += 1
    text.set_text(f"T={idx}")

#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: NameError                                 Traceback (most recent call last)
: Input In [1], in <cell line: 3>()
:       1 from utils import ccolors
:       2 fp = "./data/exact_kite_dyn=ising_beta=0.5732374683235916_T=200.pkl"
: ----> 3 df = pd.read_pickle(fp)
:       4 g = df.attrs["settings"].g
:       5 pos = nx.kamada_kawai_layout(g)
:
: NameError: name 'pd' is not defined
:END:



#+begin_src jupyter-python
sn = np.array(m.sampleNodes(int(1e5)), dtype = int)
s = np.array([m.updateState(i) for i in sn])
print("Done")
#+end_src

#+RESULTS:
: Done

#+begin_src jupyter-python
print(sn.shape, s.shape)
#+end_src

#+RESULTS:
: (100000, 1) (100000, 10)


#+begin_src jupyter-python
c = ccolors(m.nStates)

idx = np.where(s.mean(1) == 0.5)[0]
window = 500
windows = []
for i in idx[idx > window]:
    if windows  and i in windows[-1]:
        continue
    frame = np.arange(i - window, i + window)
    windows.append(frame)
windows = np.asarray(windows)

from matplotlib import pyplot as pplt
fig, ax = pplt.subplots(ncols = 2)
h = nx.draw(g, pos, ax = ax[0])
ax[0].axis("equal")
lines, = ax[1].plot(s[windows[0]].mean(1))
ax[1].set_ylim(0, 1)

tracker = ax[1].axvline(0, color = 'k', linestyle = 'dashed')
nodes = ax[0].collections[0]

frame = 0
idx = 0
text = fig.suptitle("")
ec = np.array(["none" for _ in range(len(g))])
nodes.set(edgecolor = ec, lw = 5)
while True:
    nodes.set_color(c[s[windows[frame, idx]].astype(int)])
    zdx = windows[frame, idx]
    ec.fill("none")
    ec[sn[zdx]] = "blue"
    nodes.set(edgecolor = ec)

    tracker.set_xdata((idx, idx))
    fig.canvas.start_event_loop(1)
    fig.canvas.draw()
    idx += 1
    if frame > windows.shape[0] - 1:
        frame = 0
    if idx > windows.shape[1] - 1:
        idx = 0
        frame += 1
        lines.set_ydata(s[windows[frame]].mean(1))
    text.set_text(f"Frame = {frame} T={idx}")


#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
Input In [81], in <cell line: 29>()
     33 nodes.set(edgecolor = ec)
     35 tracker.set_xdata((idx, idx))
---> 36 fig.canvas.start_event_loop(1)
     37 fig.canvas.draw()
     38 idx += 1

File ~/miniconda3/lib/python3.9/site-packages/matplotlib/backends/backend_qt5.py:429, in FigureCanvasQT.start_event_loop(self, timeout)
    426 if timeout > 0:
    427     timer = QtCore.QTimer.singleShot(int(timeout * 1000),
    428                                      event_loop.quit)
--> 429 event_loop.exec_()

KeyboardInterrupt:
virtual void QEventDispatcherUNIX::registerSocketNotifier(QSocketNotifier*): Multiple socket notifiers for same socket 11 and type Read
#+end_example
:END:

#+begin_src jupyter-python

tmp = s[windows[:, 90: 100]]
# tmp = np.array([s[j] for i in windows[:, :10] for j in i])
fig, ax = plt.subplots()
ax.imshow(tmp[5])
ax.format()
fig.show()

#+end_src

#+RESULTS:
: virtual void QEventDispatcherUNIX::registerSocketNotifier(QSocketNotifier*): Multiple socket notifiers for same socket 11 and type Read



#+begin_src jupyter-python
from tqdm import tqdm
from scipy.stats import sem
fp = "./kite_isi_beta=0.5732374683235916.pkl"
# fp = "./small_tree_isi_beta=0.9001444450539172.pickle"
ISI = pd.read_pickle(fp)

m, n = 1, 10
for idx, row in ISI.iterrows():
    if row.isi.min() < n:
        n = row.isi.min()
    if row.isi.max() > m:
        m = row.isi.max()
bins = np.linspace(n, m, 10)

tmp = []
for idx, row in ISI.iterrows():
    counts, bins = np.histogram(row.isi, bins = bins, density = 1)
    row = dict(counts = counts,
               bins = bins,
               label = row.label,
               isi = row.isi,
               seed = row.seed,
               system = row.system)
    tmp.append(row)
tmp = pd.DataFrame(tmp)
d = []
for idx, row in tmp.groupby("label".split()):
    c = np.stack(row.counts)
    mu = c.mean(0)
    s = sem(mu, axis = 0)
    h = np.stack(row.system)
    # h = np.abs(h - 0.5)
    # print(idx, np.std(h, axis = -1))
    mi_ = c.min(0)
    ma_ = c.max(0)
    row = dict(mu = mu, s = s, label = idx,
               bins = row.bins, m = mi_, mm = ma_)
    d.append(row)
d = pd.DataFrame(d)

#+end_src

#+RESULTS:



#+begin_src jupyter-python
%matplotlib qt5
from utils import ccolors
n = 1
g = df.attrs["settings"].g
color = ccolors(len(g))

# fig, ax = plt.subplots(nrows = 3, ncols = 4, share = 0)
bins = np.linspace(0, 1e4, 10)
fig, ax = plt.subplots(ncols = 2, share = 0)
for idx, row in tqdm(ISI.iterrows()):
    ci = "tab:blue"
    if row.label != "control":
        ci = color[row.label - 1]
    counts, bins = np.histogram(row.isi, density = 0)
    # ax[idx].plot((bins[:-1] + bins[1:]) / 2, counts, color = ci,
                 # marker = 'o')
    # ax[idx].set_title(f"#M(S) = 0.5 points: {len(row.isi)}")

    ax[0].plot((bins[:-1] + bins[1:]) / 2, counts, color = ci,
                 marker = 'o', lw = 5, ms = 30)
    ax[0].set_title(f"#M(S) = 0.5 points: {len(row.isi)}")
    # bins, counts = ax[idx].hist(row.isi, color = ci)
    # bins, counts = ax[idx].hist(row.isi, color = ci)

# ax.legend(loc = 'ur', ncols = 1, title = "Intervention on")
ax[:-1].format(xlabel = "Inter-stimulus interval",
          ylabel = "PMF",
          # yscale = "log"
          )
pos = nx.kamada_kawai_layout(g)
nx.draw(g, pos = pos, ax = ax[-1], node_color = color)
ax[-1].axis("equal")
# fig.savefig("./figures/kite_dist_intervention_nudges.png")
fig.show()

#+end_src

#+RESULTS:
: 66it [00:00, 692.40it/s]
: virtual void QEventDispatcherUNIX::registerSocketNotifier(QSocketNotifier*): Multiple socket notifiers for same socket 11 and type Read
