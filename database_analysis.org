* Batch analysis
#+begin_src jupyter-python
import matplotlib.pyplot as plt, cmasher as cmr, pandas as pd
import proplot as pplt
import numpy as np, os, sys, networkx as nx, warnings
from plexsim import models
from imi import infcy
# warnings.simplefilter("ignore"); plt.style.use("fivethirtyeight spooky".split())
df = pd.read_pickle('./data/database.pkl')
#+end_src

#+RESULTS:

* Make panel plots
#+begin_src jupyter-python
%load_ext autoreload
%autoreload 2

from tqdm import tqdm
from utils import show_time_decay
from pathlib import Path
from batch_fit import f
print(df.columns)
base = Path("data")
for fn in df.file:
    data = pd.read_pickle(base / fn)
    data["file"] = fn
    show_time_decay(data, f)
    break
#+end_src

#+RESULTS:
:RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Index(['system', 'node', 'deg', 'coeff', 'imi', 'half', 'asymp', 'mag', 'mse',
:        'file'],
:       dtype='object')
: loading from disk
: 100% 5/5 [00:01<00:00,  4.12it/s]
#+attr_org: :width 400 :height 400
[[file:./.ob-jupyter/a323bef64a72742436d8340aa1bffc12bce6807e.png]]
#+attr_org: :width 400 :height 400
[[file:./.ob-jupyter/5944fd8bfd14b9033d4485fcf10c062d5c1978da.png]]
#+attr_org: :width 400 :height 400
[[file:./.ob-jupyter/3b649e8c980a360b740460f3fc5150cc36647dfb.png]]
#+attr_org: :width 400 :height 400
[[file:./.ob-jupyter/39dc4b549afbeae678e4907c37944404bb6f52c5.png]]
#+attr_org: :width 400 :height 400
[[file:./.ob-jupyter/d40d5ccb9df56d9c63368dbd01f8d86426d66ed3.png]]
:END:
* Show Root mean squared error of fit
#+begin_src jupyter-python
fig, ax = pplt.subplots()
ax.hist(df.mse, density = True, bins = 100)
ax.set_xlabel("Root mean square error")
ax.set_ylabel("PMF")
ax.set_title("All data")
fig.show()
#+end_src

#+RESULTS:
:RESULTS:
#+attr_org: :width 309 :height 318
[[file:./.ob-jupyter/0c205fdefd46fd0549185644b35db5faf4524f37.png]]
:END:
** Show distribution of exponents
#+begin_src jupyter-python
%matplotlib inline
mag = np.unique(df.mag)

n = np.sqrt(mag.size)
m, n = np.ceil(n).astype(int), np.floor(n).astype(int)
fig, ax = pplt.subplots(ncols = m,
                        nrows = n,
                        sharex =  False,
                        sharey =  False)
for idx, (magi, dfi) in enumerate(df.groupby("mag")):
    coeffs = np.array([i for i in dfi.coeff])
    ax[idx].hist(coeffs[:, 0] + coeffs[:, 2] + coeffs[:, -1], density = 1, bins = 10)
    ax[idx].set_title(magi)
yl = "PMF"
xl = "Estimated value at t = 0"
ax.format(xlabel = xl, ylabel = yl)
fig.show()
#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_203080/435264078.py:17: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 1572 :height 1273
[[file:./.ob-jupyter/b522ccf3f199384d2c8c6e3560a028505ff6fefa.png]]
:END:

* Show state distribution
** General
#+begin_src jupyter-python
# general
states = pd.read_pickle("./data/state_dist.pkl")
print(states.head())
s = [si for s in states.states for si in s]
fig, ax = pplt.subplots()
ax.hist(s, density = 1, bins = 20)
fig.show()
#+end_src

#+RESULTS:
: 17d51f5b-65d4-4f7f-abc7-d208173f1011

** per system
#+begin_src jupyter-python
states = pd.read_pickle("./data/state_dist.pkl")
n = states.system.unique().size
fig, ax = pplt.subplots(ncols = n)
for idx, (system, dfi) in enumerate(states.groupby("system")):
    s = [si for s in dfi.states for si in s]
    ax[idx].hist(s, density = 1, bins = 40)
    ax[idx].set_title(f"{system=}")
xl = "System magnetization $M(S)$"
yl = "PMF"
ax.format(xlabel = xl,
          ylabel = yl)
fig.show()
#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_673645/3982796013.py:11: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 838 :height 327
[[file:./.ob-jupyter/a3c19c31ddd96f48ca733fecbf4b27051d68a3f7.png]]
:END:




* Show exponent overall
#+begin_src jupyter-python
%matplotlib inline
def show_exponent(df):
    mags = np.unique(df.mag)
    mag_map = {m: idx for idx, m in enumerate(mags)}
    c = np.linspace(0, 1, len(mag_map), 0)
    c = cmr.pride(c)
    colors = [c[mag_map[m]] for m in df.mag]

    coeffs = np.array([c for c in df.coeff.values])
    print(coeffs.shape)
    fig, ax = pplt.subplots()
    ax.scatter(*coeffs[:, [1, 3]].T, color = colors, s = 8)
    ax.set_xscale('log')
    ax.set_yscale('log')
    ax.set_xlim(0.001, 100)
    ax.set_ylim(0.001, 100)
    xl = "Exponent 1"
    yl = "Exponent 2"
    ax.format(xlabel = xl, ylabel = yl)
    h = [
        plt.Line2D([], [], marker = 'o',
            linestyle = 'none',
                color = c, label = m) for m, c in zip(mags, colors)
    ]
    ax.legend(ncol = 2, loc = 'r',
            handles = h, )
    fig.show()
show_exponent(df)
#+end_src

#+RESULTS:
:RESULTS:
: (1254, 4)
: /tmp/ipykernel_11366/2422569429.py:27: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 492 :height 311
[[file:./.ob-jupyter/6ccb032998af06c3fc6a07c79d05a13467111674.png]]
:END:
* Show exponent 3d
#+begin_src jupyter-python
%matplotlib qt5
mags = np.unique(df.mag)
mag_map = {m: idx for idx, m in enumerate(mags)}
c = np.linspace(0, 1, len(mag_map), 0)
c = cmr.pride(c)
colors = [c[mag_map[m]] for m in df.mag]

coeffs = np.array([i for i in df.coeff])
x, y, z = coeffs[:, [1, 3, 4]].T
fig, ax = pplt.subplots(subplot_kw = dict(projection = '3d'))
ax.scatter(np.log(x), np.log(y), z, color = colors)

ax.format(xlabel = "log(exponent 1)",
          ylabel = "log(exponent 2)",
          )
ax.set_zlabel("Offset")
fig.show()
%matplotlib inline
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Input In [33], in <module>
      6 colors = [c[mag_map[m]] for m in df.mag]
      8 coeffs = np.array([i for i in df.coeff])
----> 9 x, y, z = coeffs[:, [1, 3, 4]].T
     10 fig, ax = pplt.subplots(subplot_kw = dict(projection = '3d'))
     11 ax.scatter(np.log(x), np.log(y), z, color = colors)

IndexError: index 3 is out of bounds for axis 1 with size 3
Warning: Ignoring XDG_SESSION_TYPE=wayland on Gnome. Use QT_QPA_PLATFORM=wayland to run on Wayland anyway.
#+end_example
:END:


* Show exponent per degree
#+begin_src jupyter-python
def show_exponent_deg(df):
    deg = np.unique(df.deg)
    N = deg.size
    mags = np.unique(df.mag)
    mag_map = {m: idx for idx, m in enumerate(mags)}
    c = np.linspace(0, 1, len(mag_map), 0)
    c = cmr.pride(c)


    n = np.sqrt(N)
    m = int(np.ceil(n))
    n = int(np.floor(n))

    fig, ax = pplt.subplots(
                    ncols = n, nrows = m,
                    sharey = "all", sharex = 'all')
    fig.show()


    for zdx, (deg, i) in enumerate(df.groupby("deg")):
        colors = [c[mag_map[m]] for m in i.mag]
        # zdx = 0
        coeffs = np.array([j for j in i.coeff])
        ax[zdx].scatter(*coeffs[:, [1, 3]].T, color = colors,
                        # s = 5
                        )
        ax[zdx].set_xscale("log")
        ax[zdx].set_yscale('log')
        ax[zdx].set_title(f"{deg=}")
        ax[zdx].format(xlocator='log', xminorlocator='logminor')

    ax.format(xlabel = "Exponent 1", ylabel = "Exponent 2")
    handles = [
        plt.Line2D([], [],
                color = c, marker = 'o',
                linestyle = 'none',
                label = k
                )
        for k, c in zip(mags, colors)

    ]
    ax[0, -1].legend(loc = 'r', handles = handles, ncol = 1)
    fig.savefig("./figures/exponent_plot_colored.png")
    fig.show()
    print("done")
show_exponent_deg(df)
#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_11366/612837638.py:17: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
# [goto error]
#+begin_example
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Input In [32], in <module>
     44     fig.show()
     45     print("done")
---> 46 show_exponent_deg(df)

Input In [32], in show_exponent_deg(df)
     22 # zdx = 0
     23 coeffs = np.array([j for j in i.coeff])
---> 24 ax[zdx].scatter(*coeffs[:, [1, 3]].T, color = colors,
     25                 # s = 5
     26                 )
     27 ax[zdx].set_xscale("log")
     28 ax[zdx].set_yscale('log')

IndexError: index 3 is out of bounds for axis 1 with size 3
#+end_example
#+attr_org: :width 563 :height 836
[[file:./.ob-jupyter/5f7f90a5e8f17cbe3f2fcc2e1290f7fceab41f03.png]]
:END:

#+begin_src jupyter-python
fig, ax = plt.subplots()
ax.hist(df.imi)
fig.show()
np.all(np.isfinite(df.imi))
#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_11366/184119920.py:3: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
: True
#+attr_org: :width 400 :height 400
[[file:./.ob-jupyter/acf24fa119e1be144451157ddb9d11749dad2e92.png]]
:END:
* ISI analysis
#+begin_src jupyter-python
from pathlib import Path
base = Path("data/")
N = df.file.unique().size
fig, ax = pplt.subplots(ncols = N)
for idx, file in enumerate(df.file.unique()):
    data = pd.read_pickle(base/file)
    tips = data["tips"]

    print(type(tips))
    assert 0
    isi = np.diff(tips)
    # jdx = np.where(isi < 100)
    # isi = isi[jdx]
    ax[idx].hist(abs(isi), bins = 100, density = 1)
    # ax.set_xlim(0, 300)
    # ax[idx].set_xscale("log")
    # ax[idx].set_yscale("log")
fig.show()
#+end_src
#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: NameError                                 Traceback (most recent call last)
: Input In [2], in <module>
:       1 from pathlib import Path
:       2 base = Path("data/")
: ----> 3 N = df.file.unique().size
:       4 fig, ax = pplt.subplots(ncols = N)
:       5 for idx, file in enumerate(df.file.unique()):
:
: NameError: name 'df' is not defined
:END:

#+begin_src jupyter-python
ts = s[:]
fig, ax = plt.subplots()
ax.axhline(0.5 + 1/m.nNodes)
ax.axhline(0.5 - 1/m.nNodes)
ax.plot(ts.cumsum() / np.arange(1, ts.size + 1))
fig.show()
#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_11366/3169244764.py:6: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 640 :height 480
[[file:./.ob-jupyter/3477778eaca2c717bfa2e4898b9cf27650aab70d.png]]
:END:

#+begin_src jupyter-python
fig, ax = plt.subplots()
ax.plot(s[-10000:])
ax.plot(s[:10000])
fig.show()

#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_11366/3422640813.py:4: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 640 :height 480
[[file:./.ob-jupyter/375120d8d55c6256a585a6f1242334c6f2be0cf9.png]]
:END:

#+begin_src jupyter-python
nx.draw(m.graph)
#+end_src

#+RESULTS:
:RESULTS:
#+attr_org: :width 640 :height 480
[[file:./.ob-jupyter/7d081c36714c11804d41d022ce2fd15c44487001.png]]
:END:
