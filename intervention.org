#+begin_src jupyter-python
import proplot as plt, cmasher as cmr, pandas as pd,\
    numpy as np, os, sys, networkx as nx, warnings
from plexsim import models
from imi import infcy

fp = "kite_isi_beta=0.5732374683235916.pkl"
# fp = "kite_intervention_beta=0.5732374683235916.pkl"
df = pd.read_pickle(fp)
df.head(1)
#+end_src

#+RESULTS:
:      label                                                isi  seed  \
: 0  control  [4, 1, 4, 1, 1, 2256, 1, 1, 4863, 39, 1, 1, 1,...  1234
:
:                                               system
: 0  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...

#+begin_src jupyter-python
def make_windows(idx):
    # get where large transitions occur
    wdx = np.where(np.diff(idx) > 1)[0]
    windows = []
    start = 0
    for wdxi in wdx:
        window = np.arange(start, wdxi)
        windows.append(window)
        start = wdxi
    return windows


def get_var(row):
    rmses = np.zeros((2,row.seed.unique().size))
    for sidx, (seed, srow) in enumerate(row.groupby("seed")):
        for pidx, operator in enumerate((np.less, np.greater)):
            system = srow.system.iloc[0]
            idx = np.where(operator(system, 0.5))[0]
            windows = make_windows(idx)
            for window in windows:
                tmp = system[idx[window]]
                rmses[pidx, sidx] += np.nanmean(((tmp - np.nanmean(tmp))**2)) / len(windows)
    return rmses


tmp = df.groupby("label").apply(get_var)
#+end_src

#+RESULTS:
#+begin_example
/tmp/ipykernel_62863/1223948854.py:22: RuntimeWarning: Mean of empty slice
  rmses[pidx, sidx] += np.nanmean(((tmp - np.nanmean(tmp))**2)) / len(windows)
/tmp/ipykernel_62863/1223948854.py:22: RuntimeWarning: Mean of empty slice
  rmses[pidx, sidx] += np.nanmean(((tmp - np.nanmean(tmp))**2)) / len(windows)
/tmp/ipykernel_62863/1223948854.py:22: RuntimeWarning: Mean of empty slice
  rmses[pidx, sidx] += np.nanmean(((tmp - np.nanmean(tmp))**2)) / len(windows)
/tmp/ipykernel_62863/1223948854.py:22: RuntimeWarning: Mean of empty slice
  rmses[pidx, sidx] += np.nanmean(((tmp - np.nanmean(tmp))**2)) / len(windows)
/tmp/ipykernel_62863/1223948854.py:22: RuntimeWarning: Mean of empty slice
  rmses[pidx, sidx] += np.nanmean(((tmp - np.nanmean(tmp))**2)) / len(windows)
#+end_example



show variance of noise
#+begin_src jupyter-python
from scipy.stats import sem
c = ccolors(len(g))
fig, ax = plt.subplots(ncols = 2, abc = 1)

ax.format()
fig.show()

for label, dfi in tmp.groupby("label"):
    loc = -1
    if dfi.index[0] == "control":
        ci = "tab:blue"
        lab = "control"
    else:
        ci = c[dfi.index[0]]

    if label != "control":
        loc = label
    rmse = dfi.iloc[0]
    var0 = sem(rmse, 1, nan_policy = 'omit')[0] * 2
    ax[0].bar(loc, np.nanmean(rmse, 1)[0] , color = ci)
    ax[0].errorbar(loc, np.nanmean(rmse, 1)[0], var0 , color = 'k')

    var1 = sem(rmse, 1, nan_policy = "omit")[1]
    ax[1].bar(loc, np.nanmean(rmse, 1)[1], color = ci)
    ax[1].errorbar(loc, np.nanmean(rmse, 1)[1], var1, color = 'k')

xtl = tmp.index.unique()
xtl = np.roll(xtl, 1)
ax.format(ylabel = "Root mean square error",
          xlabel = "Pinning intervention on",
          )
ax.set_xticklabels(xtl)
ax.set_xticks(np.arange(-1, xtl.size))
for axi in ax:
    axi.get_xticklabels()[0].set_rotation(45)

ax[0].set_title("Fraction of nodes < 0.5")
ax[1].set_title("Fraction of nodes > 0.5")
fig.savefig("./figures/kite_rmse.png")
#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_62863/1064237262.py:6: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
: /tmp/ipykernel_62863/1064237262.py:32: ProplotWarning: Calling arbitrary axes methods from SubplotGrid was deprecated in v0.8 and will be removed in a future release. Please index the grid or loop over the grid instead.
:   ax.set_xticklabels(xtl)
: /home/casper/miniconda3/lib/python3.9/site-packages/proplot/gridspec.py:1259: UserWarning: FixedFormatter should only be used together with FixedLocator
:   result.append(func(*args, **kwargs))
: /tmp/ipykernel_62863/1064237262.py:33: ProplotWarning: Calling arbitrary axes methods from SubplotGrid was deprecated in v0.8 and will be removed in a future release. Please index the grid or loop over the grid instead.
:   ax.set_xticks(np.arange(-1, xtl.size))
#+attr_org: :width 587 :height 341
[[file:./.ob-jupyter/17c7b7288ead56c46d4f129df191e6f2a70e6914.png]]
:END:

show system trajectories
#+begin_src jupyter-python
c = ccolors(df.label.unique().size - 1)
for seed, dfi in df.groupby("seed".split()):
    nrows = dfi.label.unique().size

    starts = []
    spacing = 0.6
    fig, ax = plt.subplots()
    yt = []

    up = 0
    for adx, (idx, dfj) in enumerate(dfi.iterrows()):
        if dfj.label == "control":
            ci = "tab:blue"
        else:
            ci = c[dfj.label]
        yt.append(up)
        yt.append(up + 1)
        y = dfj.system[:20000] + up
        ax.plot(y , color = ci, lw = 0.5,
                label = dfj.label)
        starts.append(up)
        up += 1 + spacing
    ax.format(xlabel = "Time(t)", ylabel = "Fraction of nodes +1",
              # ylim = (-0.05, 1.05)
              )
    ax.legend(loc = 'r', ncols = 1,
              title = "Pinning intervention on")

    yl = []
    for s in starts:
        yl.append(0)
        yl.append(1)
    ax.set_yticks(yt)
    ax.set_yticklabels(yl)
    fig.savefig(f"./figures/kite_system_trajectory_{seed=}.png")
    fig.show()

#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
22 22
/tmp/ipykernel_62863/2623032384.py:37: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
  fig.show()
22 22
/tmp/ipykernel_62863/2623032384.py:37: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
  fig.show()
22 22
/tmp/ipykernel_62863/2623032384.py:37: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
  fig.show()
22 22
/tmp/ipykernel_62863/2623032384.py:37: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
  fig.show()
22 22
/tmp/ipykernel_62863/2623032384.py:37: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
  fig.show()
22 22
/tmp/ipykernel_62863/2623032384.py:37: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
  fig.show()
22 22
/tmp/ipykernel_62863/2623032384.py:37: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
  fig.show()
#+end_example
#+attr_org: :width 441 :height 300
[[file:./.ob-jupyter/980d1b45f611afa0032cfddf536241eb03934bca.png]]
#+attr_org: :width 441 :height 300
[[file:./.ob-jupyter/b8314aa1aa5b8ce0aafda26246c3ea627a47ed68.png]]
#+attr_org: :width 441 :height 300
[[file:./.ob-jupyter/acc718234118c4b40737289844d63a04103a82a6.png]]
#+attr_org: :width 441 :height 300
[[file:./.ob-jupyter/bb80cb3c9d8586be7c70e56725792d871c28a0b0.png]]
#+attr_org: :width 441 :height 300
[[file:./.ob-jupyter/a6fed343baef82ef557d0badc98293b354c2a513.png]]
#+attr_org: :width 441 :height 300
[[file:./.ob-jupyter/7d4270fbe3165e4b80e414341e20f4d00123ea6f.png]]
#+attr_org: :width 441 :height 300
[[file:./.ob-jupyter/2876e4118c6766cd02b678fbc39ee5e2c73719e3.png]]
:END:
dkfaljdf
#+begin_src jupyter-python
from utils import ccolors
from matplotlib.pyplot import Line2D
import matplotlib.pyplot as pplt
from scipy.stats import sem
g = nx.krackhardt_kite_graph()
c = ccolors(len(g))

print(df.head(1))
fig, ax = plt.subplots(nrows = 2, ncols = 2, share = 0)
handles = []
for group, dfi in df.groupby("label"):
    sim = np.stack(dfi.system)

    m = np.zeros((2, sim.shape[0]))
    t = np.zeros((2, sim.shape[0]))
    for idx, simi in enumerate(sim):
        tmp = simi[simi < 0.5]
        m[0, idx] = np.sqrt(((tmp - tmp.mean())**2).mean())
        t[0, idx] = tmp.size

        tmp = simi[simi > 0.5]
        m[1, idx] = np.sqrt(((tmp - tmp.mean())**2).mean())
        t[1, idx] = tmp.size

    lab = dfi.label.iloc[0]
    if dfi.label.iloc[0] == "control":
        ci = "tab:blue"
        lab = "control"
    else:
        ci = c[dfi.label.iloc[0]]

    loc = -1
    if dfi.label.iloc[0] != "control":
        loc = dfi.label.iloc[0]

    ax[0, 0].errorbar(loc, m[0].mean(), m[0].std(), color = 'k')
    ax[0, 1].errorbar(loc, m[1].mean(), m[1].std(), color = 'k')

    ax[0, 0].bar(loc, m[0].mean(), color = ci)
    ax[0, 1].bar(loc, m[1].mean(), color = ci)


    ax[1, 0].errorbar(loc, t[0].mean(), t[0].std(), color = 'k')
    ax[1, 0].bar(loc, t[0].mean(), color = ci)

    ax[1, 1].errorbar(loc, t[1].mean(), t[1].std(), color = 'k')
    ax[1, 1].bar(loc, t[1].mean(), color = ci)

    h = Line2D([], [], color = ci, label = lab, linestyle = 'none',
               marker = 'o')
    handles.append(h)


print(df.label.unique())
ax[0].set_title("Fraction of nodes < 0.5")
ax[1].set_title("Fraction of nodes > 0.5")
# fig.legend(loc = "t", handles = handles,
             # title = "Pinning \nintervention on")

ax[0, :].format(ylabel = "Root sum squared error",
          xlabel = "Pinning intervention on"
          )
ax[1, :].format(ylabel = "Simulation steps",
          xlabel = "Pinning intervention on"
          )



xl = df.label.unique()
xr = np.arange(len(xl))
ax.set_xticklabels(xl)
# fig.savefig("./figures/rmse_kite.png")
# ax.set_xticks(xr)
fig.show()
#+end_src
: /tmp/ipykernel_62863/376798806.py:4: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 552 :height 285
[[file:./.ob-jupyter/4af87144468b337be92f653a91afe87315453dfe.png]]
:END:
#+RESULTS:
:RESULTS:
#+begin_example
     label                                                isi  seed  \
0  control  [4, 1, 4, 1, 1, 2256, 1, 1, 4863, 39, 1, 1, 1,...  1234

                                              system
0  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...
['control' 0 1 2 3 4 5 6 7 8 9]
/tmp/ipykernel_62863/3665603034.py:71: ProplotWarning: Calling arbitrary axes methods from SubplotGrid was deprecated in v0.8 and will be removed in a future release. Please index the grid or loop over the grid instead.
  ax.set_xticklabels(xl)
/home/casper/miniconda3/lib/python3.9/site-packages/proplot/gridspec.py:1259: UserWarning: FixedFormatter should only be used together with FixedLocator
  result.append(func(*args, **kwargs))
/tmp/ipykernel_62863/3665603034.py:74: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
  fig.show()
#+end_example
#+attr_org: :width 659 :height 618
[[file:./.ob-jupyter/522757617f21a64eba00385dcb36fe1ca2c2cc4b.png]]
:END:
iadlkfdjf
#+begin_src jupyter-python
fig, ax = plt.subplots()
ax.plot(sim[:10000])
ax.format()
fig.show()
#+end_src
