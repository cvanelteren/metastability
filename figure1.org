
#+begin_src jupyter-python
%load_ext autoreload
%autoreload 2
import warnings
warnings.filterwarnings( "ignore", module = "matplotlib\..*" )
import proplot as plt, cmasher as cmr, pandas as pd,\
    numpy as np, os, sys, networkx as nx, warnings
from plexsim import models
from imi import infcy
from plexsim.utils.graph import recursive_tree
# g = recursive_tree(4)
g = nx.krackhardt_kite_graph()
# g = nx.sedgewick_maze_graph()
# print(len(g))
# pos = nx.forceatlas2_layout(g, n_iter = 50)
# nx.draw(g, pos = pos)

# from figure1 import *
# fig, ax = plt.subplots()
# show_energy_graph(g, pos, ax)
# ax.format()
# fig.show()

#+end_src

#+RESULTS:




showing system trajectory
#+begin_src jupyter-python
seed = 12345
seed = 8
t = 1/0.5732374683235916
np.random.seed(seed)
# m = models.Potts(g, t = t , seed = seed, sampleSize = 1)
m = models.Potts(g, t = t , seed = seed)

#s = m.simulate(100000)#[100:]
m.states = 0
s = m.simulate(1000)#[100:]
idx = np.logical_and(
    s.mean(1) >= 0.5 - 1/m.nNodes,
    s.mean(1) <= 0.5 + 1/m.nNodes)
tipping = np.where(idx)[0]

from figure1 import *
fig, ax = plt.subplots()
show_system_time(s, ax)
fig.show()
#+end_src
#+RESULTS:
:RESULTS:
: /tmp/ipykernel_3660/3304453955.py:19: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 374 :height 328
[[file:./.ob-jupyter/7024a0b0124b3fc0bb734451f876647503739de5.png]]
:END:


showing bistability
#+begin_src jupyter-python
from exact import ising, gen_states
import cupy as cp
from figure1 import *
states, _ = gen_states(len(g))
A = nx.adjacency_matrix(g).todense()
E = ising(states, A).sum(1)
beta = 0.3
P = np.exp(-beta * E) / np.exp(-beta * E).sum()

n = len(g)
bins = np.linspace(0 - 1/ (2 * n), 1 + 1/ (2 * n) , n + 2)
mu = states.mean(1)

counts = {}
dp = np.diff(bins)[0]
for S, e, p in zip(mu, E, P):
    idx = np.digitize(S, bins)
    b = bins[idx]
    counts[b] = counts.get(b, 0) + p
x = np.asarray(list(counts.keys()))
x -= 1/(2 * n) # correct for binning
y = np.asarray(list(counts.values()))

fig, ax = plt.subplots()
show_bistability(x, y, ax)
fig.show()
#+end_src


#+RESULTS:
:RESULTS:
: 100% 1024/1024 [00:00<00:00, 11165.71it/s]
: /tmp/ipykernel_3660/1546370244.py:5: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.
:   A = nx.adjacency_matrix(g).todense()
: /tmp/ipykernel_3660/1546370244.py:26: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 337 :height 328
[[file:./.ob-jupyter/01f6d07f7f91a2e10cfe3cbab23d627d008cb567.png]]
:END:


showing energy per nodes
#+begin_src jupyter-python
from fa2.forceatlas2 import ForceAtlas2 as fa
g = nx.krackhardt_kite_graph()
# pos = fa(scalingRatio = 10).forceatlas2_networkx_layout(g, iterations = 10)
# pos = {p: np.array(v) for p, v in pos.items()}
fig, ax = plt.subplots()
pos = nx.kamada_kawai_layout(g)
show_energy_graph(g, pos, ax)
# ax.axis('equal')
fig.show()
#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_3660/1584647286.py:9: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 262 :height 262
[[file:./.ob-jupyter/b6a145f432008a03bf2098d3bcfe5ee6c78725a5.png]]
:END:

show progression of tipping points
#+begin_src jupyter-python
from figure1 import *
fig, ax = plt.subplots()
show_progression(ax)
fig.show()
plt.show()
#+end_src

#+RESULTS:
:RESULTS:
#+attr_org: :width 262 :height 172
[[file:./.ob-jupyter/14ca506165c98568c8194792bcd78ff6c7bb970e.png]]
:END:

show figure 1 introduction plot
#+begin_src jupyter-python
%load_ext autoreload
%autoreload 2

# plt.use_style("".split())

plt.rc["font.size"] = 16
# fig, ax = plt.subplots(ncols = 2, sharex = 0, sharey = 0)

pos = nx.kamada_kawai_layout(g)
# pos = nx.rescale_layout_dict(pos, 3)
# pos = {p: np.asarray(pi) for p, pi in pos.items()}
# left = 5
# x = np.linspace(-left, left)


# V = lambda x, e0, c : e0 * (c * x ** 4 -  x**2)
# E = V(x, 2e-4, 0.045)
# E = .2  * (E / E.max())

# x *= 0.08
# from utils import ccolors
# c = ccolors(len(g))
# xy = np.asarray([x, E])

from matplotlib.collections import LineCollection as LC
from matplotlib.patches import Circle

from figure1 import *

layout = [
    [1, 2, 2, 3, 3, 3],
    [1, 2, 2, 4, 5, 6]
]
layout = [[1, 2, 3],
          [4, 5, 6],]

fig = plt.figure(sharex = 0,
                 sharey = 0,
                 share = 0,
                 )
ax = fig.add_subplots(layout, abc = True)
show_energy_graph(g, pos, ax[0])
show_bistability(x, y, ax[1])
show_system_time(s, ax[2])


show_progression_restricted(level = 0.1, level_color = "green", ax = ax[3])
show_progression_restricted(level = 0.3,
                level_color = "blue",
                ax = ax[4])
show_progression_restricted(level = 0.55, level_color = "red", ax = ax[5],
                 annotate = True)

# ax[0].axis("equal")
# ax[0].axis("equal")
# ax[1].axis("scaled")
# ax[3].set_xlim(0, 80)
# ax[4].set_xlim(0, 80)
# ax[5].set_xlim(0, 80)
# ax[3:].format(aspect = 10)
# ax[0].axis("equal")
# fig.subplots_adjust(hspace = 1.2)
# fig.margins(0)
fig.savefig("./figures/figure1.pdf")
fig.show()
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
The autoreload extension is already loaded. To reload it, use:
  %reload_ext autoreload
/home/casper/orgfiles/roam/papers/Metastability/figure1.py:298: UserWarning: Attempted to set non-positive bottom ylim on a log-scaled axis.
Invalid limit will be ignored.
  from matplotlib.patches import Circle
/home/casper/orgfiles/roam/papers/Metastability/figure1.py:298: UserWarning: Attempted to set non-positive bottom ylim on a log-scaled axis.
Invalid limit will be ignored.
  from matplotlib.patches import Circle
/home/casper/orgfiles/roam/papers/Metastability/figure1.py:298: UserWarning: Attempted to set non-positive bottom ylim on a log-scaled axis.
Invalid limit will be ignored.
  from matplotlib.patches import Circle
/tmp/ipykernel_3660/3841028598.py:65: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
  fig.show()
#+end_example
#+attr_org: :width 1247 :height 782
[[file:./.ob-jupyter/1789c6599072e1262761e61cb15f06d1da591d05.png]]
:END:
kaldsjf
#+begin_src jupyter-python
fig, ax = plt.subplots(ncols = 2, rows = 2)
ax.ge
ax.format()
fig.show()

#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Input In [128], in <cell line: 1>()
----> 1 fig, ax = plt.subplots(ncols = 2, rows = 2)
      2 print(ax[0].gridspec)
      4 ax.format()

File ~/miniconda3/lib/python3.9/site-packages/proplot/ui.py:191, in subplots(*args, **kwargs)
    189     kwformat.update(_pop_params(kwargs, sig))
    190 # Initialize
--> 191 fig = figure(rc_kw=rc_kw, **kwargs)
    192 axs = fig.add_subplots(*args, **kwsubs)
    193 axs.format(rc_kw=rc_kw, **kwformat)

File ~/miniconda3/lib/python3.9/site-packages/proplot/ui.py:143, in figure(**kwargs)
    120 """
    121 Create an empty figure. Subplots can be subsequently added using
    122 `~proplot.figure.Figure.add_subplot` or `~proplot.figure.Figure.subplots`.
   (...)
    140 matplotlib.figure.Figure
    141 """
    142 _parse_figsize(kwargs)
--> 143 return plt.figure(FigureClass=pfigure.Figure, **kwargs)

File ~/miniconda3/lib/python3.9/site-packages/matplotlib/pyplot.py:768, in figure(num, figsize, dpi, facecolor, edgecolor, frameon, FigureClass, clear, **kwargs)
    759 if len(allnums) == max_open_warning >= 1:
    760     _api.warn_external(
    761         f"More than {max_open_warning} figures have been opened. "
    762         f"Figures created through the pyplot interface "
   (...)
    765         f"warning, see the rcParam `figure.max_open_warning`).",
    766         RuntimeWarning)
--> 768 manager = new_figure_manager(
    769     num, figsize=figsize, dpi=dpi,
    770     facecolor=facecolor, edgecolor=edgecolor, frameon=frameon,
    771     FigureClass=FigureClass, **kwargs)
    772 fig = manager.canvas.figure
    773 if fig_label:

File ~/miniconda3/lib/python3.9/site-packages/matplotlib/pyplot.py:316, in new_figure_manager(*args, **kwargs)
    314 """Create a new figure manager instance."""
    315 _warn_if_gui_out_of_main_thread()
--> 316 return _backend_mod.new_figure_manager(*args, **kwargs)

File ~/miniconda3/lib/python3.9/site-packages/matplotlib/backend_bases.py:3544, in _Backend.new_figure_manager(cls, num, *args, **kwargs)
   3542 from matplotlib.figure import Figure
   3543 fig_cls = kwargs.pop('FigureClass', Figure)
-> 3544 fig = fig_cls(*args, **kwargs)
   3545 return cls.new_figure_manager_given_figure(num, fig)

File ~/miniconda3/lib/python3.9/site-packages/proplot/internals/warnings.py:96, in _rename_kwargs.<locals>.decorator.<locals>._deprecate_kwargs(*args, **kwargs)
     91         key_new = key_new.format(value)
     92     _warn_proplot(
     93         f'Keyword {key_old!r} was deprecated in version {version} and will '
     94         f'be removed in a future release. Please use {key_new!r} instead.'
     95     )
---> 96 return func_orig(*args, **kwargs)

File ~/miniconda3/lib/python3.9/site-packages/proplot/figure.py:712, in Figure.__init__(self, refnum, ref, refaspect, aspect, refwidth, refheight, axwidth, axheight, figwidth, figheight, width, height, journal, sharex, sharey, share, spanx, spany, span, alignx, aligny, align, left, right, top, bottom, wspace, hspace, space, tight, outerpad, innerpad, panelpad, wpad, hpad, pad, **kwargs)
    710 kw_format = _pop_params(kwargs, self._format_signature)
    711 with self._context_authorized():
--> 712     super().__init__(**kwargs)
    714 # Super labels. We don't rely on private matplotlib _suptitle attribute and
    715 # _align_axis_labels supports arbitrary spanning labels for subplot groups.
    716 # NOTE: Don't use 'anchor' rotation mode otherwise switching to horizontal
    717 # left and right super labels causes overlap. Current method is fine.
    718 self._suptitle = self.text(0.5, 0.95, '', ha='center', va='bottom')

TypeError: __init__() got an unexpected keyword argument 'rows'
#+end_example
:END:

tryout cross annotation with arrows
#+begin_src jupyter-python
import matplotlib
fig, ax = pplt.subplots(ncols = 2)
ax0tr = ax[0].transData # Axis 0 -> Display
ax1tr = ax[1].transData # Axis 1 -> Display
figtr = fig.transFigure.inverted() # Display -> Figure
# 2. Transform arrow start point from axis 0 to figure coordinates
ptB = figtr.transform(ax0tr.transform((0.5, 0.5)))
# 3. Transform arrow end point from axis 1 to figure coordinates
ptE = figtr.transform(ax1tr.transform((0.5, 0.5)))
# 4. Create the patch
arrow = matplotlib.patches.FancyArrowPatch(
    ptB, ptE, transform=fig.transFigure,  # Place arrow in figure coord system
    fc = "g",
    connectionstyle="arc3,rad=0.2",
    arrowstyle='simple',
    alpha = 0.3,
    mutation_scale = 40.
)
# 5. Add patch to list of objects to draw onto the figure
fig.patches.append(arrow)
xy = np.array([0.5, 0.5])
fig.show()

#+end_src


#+begin_src jupyter-python

fig, ax = pplt.subplots(ncols = 3)
ax[0].axis("equal")
nx.draw(g, pos, ax = ax[0])

ax[1].scatter(*np.random.rand(2, 100))
ax[1].axis("square")
ax[2].axis("square")
fig.show()

#+end_src

#+RESULTS:
:RESULTS:
#+attr_org: :width 827 :height 491
[[file:./.ob-jupyter/d37d5657192d3edad648d125c2363c7c3ceec2c9.png]]
:END:


#+begin_src jupyter-python
f = lambda x,a,b,c,d,g : a * np.exp(-b*x) + c * np.exp(-d * x) + g
x = np.linspace(0, 10)
y = f(x, 0.5, 10, 0.5, 0.3, 0.2)

fig, ax = plt.subplots()
ax.plot(x, y)
ax.axhline(0.2, linestyle = "dashed", color = "k")
ax.set_ylim(0, 1)
ax.annotate("Asymptotic information", (5, 0.15), va = "top",
            ha = "center", fontsize = 8)
lower = np.ones(x.size) * 0.2

ax.fill_between(x, y, lower,  color = "gray", alpha = 0.8)
ax.annotate("Integrated mutual information\n $\mu(s_i)$",
            (2, 0.4),
            xytext =(7, 0.6),
            ha = "center",
            va = "center",
            fontsize = 8,
            arrowprops = dict(fc = "black", shrink = 0.05))
ax.format(xlabel = "Time (t)", ylabel = "$I(s_i : S^t)$")
fig.show()

#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_224402/296053403.py:22: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 359 :height 336
[[file:./.ob-jupyter/11fdba5aa800b38ba3298afab06ea4ebd2e2a9b6.png]]
:END:

#+begin_src jupyter-python
layout = [
    [1, 1, 2, 2,  3, 3],
    [4, 4, 4, 4, 5, 5]
]
print(layout)

fig = plt.figure()
ax = fig.add_subplots(layout, abc = 1)

fig.show()

#+end_src

#+RESULTS:
:RESULTS:
: [[1, 1, 2, 2, 3, 3], [4, 4, 4, 4, 5, 5]]
#+attr_org: :width 834 :height 601
[[file:./.ob-jupyter/29a63884c5012d89e1467d79eceaab446fc88a6e.png]]
:END:

#+begin_src jupyter-python
fig, ax = plt.subplots()

text = "A B C".split()
for idx in range(3):
    shifted = {node: pos + np.array([idx * 10,0]) for node, pos in pos.items()}
    nx.draw(g, pos = shifted, ax = ax,
            node_size = 32,
            )
            #with_labels = 1)
    label = shifted[0]
    if text:
        ax.text(*(label + np.array([0, 5])), text,
                ha = "center", fontsize = 8)


ax.axis("equal")
fig.show()

#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_222794/3098744293.py:21: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 272 :height 103
[[file:./.ob-jupyter/c71de21d9513d748eb2a1b8d14e3925ee19504d5.png]]
:END:


#+begin_src jupyter-python
import cupy as cp
n = 2**12
A = cp.random.rand(n, n)
%timeit -n10 -r10 cp.einsum("ij, jk -> ik", A, A)
#+end_src

#+RESULTS:
: The slowest run took 5641.45 times longer than the fastest. This could mean that an intermediate result is being cached.
: 509 ms ± 338 ms per loop (mean ± std. dev. of 10 runs, 10 loops each)


#+begin_src jupyter-python
import numpy as np
A = np.eye(2**12)
%timeit -n2 -r10 np.dot(A , A)
#+end_src

#+RESULTS:
: 679 ms ± 125 ms per loop (mean ± std. dev. of 10 runs, 2 loops each)
