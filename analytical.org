
#+begin_src jupyter-python
import proplot as plt, cmasher as cmr, pandas as pd
import numpy as np, os, sys, networkx as nx, warnings
from plexsim import models
from imi import infcy
# warnings.simplefilter("ignore"); plt.style.use("fivethirtyeight spooky".split())
from pathlib import Path
from exact_utils import *
p = "exact_cycle10.pkl"
p = "exact_double_circle.pkl"
p = "exact_small_tree.pkl"
p = "exact_path_graph3.pkl"
p = "exact_y_split.pkl"
# p =  "exact_system_14.pkl"
p = "exact_cycle10.pkl"
# p = "exact_double_circle.pkl"
p = "exact_small_tree.pkl"
# p = "exact_path_graph3.pkl"
p = "exact_y_split.pkl"
p = "exact_psycho.pkl"
p = "exact_LCF_graph_n=10_shift_list=[-2]_repeat=5.pkl"

p = Path(p)

df = pd.read_pickle(p)
show_panel(df, p)
# df.head(1)
#+end_src

#+RESULTS:
:RESULTS:
: [-1.   0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1. ]
#+attr_org: :width 2154 :height 318
[[file:./.ob-jupyter/17662e5604cd3e40890ba6d3171595baafa07caf.png]]
:END:

#+begin_src jupyter-python
g = df.graph.iloc[0]
m = models.Potts(g, t = .5)
s = m.simulate(1000000).mean(1)
fig, ax = plt.subplots()
ax.plot(s)
ax.format()
fig.show()

#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_1224129/2234915574.py:7: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 288 :height 282
[[file:./.ob-jupyter/184e91c1116e73832b99efec7a049b6c2d4cd70b.png]]
:END:


#+begin_src jupyter-python
f = lambda x, a, b, c, d, g: a * np.exp(-b * x) + c * np.exp(-d * x) + g
p = Path("./")
output = {}
for fn in tqdm(p.iterdir()):
    if fn.name.startswith("exact_LCF_graph"):
        df = pd.read_pickle(fn)
        df = fit_curve(df, f)
        output[f.name] = df
#+end_src

#+RESULTS:
: exact_LCF_graph_n=10_shift_list=[-2]_repeat=1.pkl
: exact_LCF_graph_n=10_shift_list=[-2]_repeat=7.pkl
: exact_LCF_graph_n=10_shift_list=[-2]_repeat=5.pkl
: exact_LCF_graph_n=10_shift_list=[-2]_repeat=2.pkl
: exact_LCF_graph_n=10_shift_list=[-2]_repeat=6.pkl
: exact_LCF_graph_n=10_shift_list=[-2]_repeat=4.pkl
: exact_LCF_graph_n=10_shift_list=[-2]_repeat=3.pkl


#+begin_src jupyter-python
g = df.graph.iloc[0]
pos = nx.kamada_kawai_layout(g)
nx.draw(g, pos = pos, with_labels = 1)
#+end_src

#+RESULTS:
:RESULTS:
#+attr_org: :width 400 :height 400
[[file:./.ob-jupyter/5dce3f761c8596a69d17bd705d385913f10335fc.png]]
:END:





#+begin_src jupyter-python
print(np.stack(new_df.half).shape)
new_df.head(1)
#+end_src

#+RESULTS:
:RESULTS:
: (12, 10)
#+begin_example
                                              system  \
0  [10.0, 9.019188898256711, 8.404585277638672, 7...

                                               nodes  \
0  [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,...

                            graph  mag  \
0  (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) -1.0

                                              coeffs  \
0  [[0.12410930900721955, 0.2576924809447904, 0.7...

                                                half  \
0  [50.246921574360734, 26.700527589593282, 26.70...

                                               asymp  \
0  [0.1605561145867902, 0.21140633041316448, 0.21...

                                                 imi  \
0  [67.53792255470108, 35.665136731914814, 35.665...

                                                rmse
0  [0.0011323271473109562, 0.002146654851594349, ...
#+end_example
:END:



#+begin_src jupyter-python
%matplotlib inline
mag = new_df.mag.unique()
layout = np.arange(0, mag.size, dtype = int) + 1
layout = layout.reshape(3,4)

fig = pplt.figure()
ax = fig.add_subplots()
n = mag.size
colors = ccolors(n)
for idx, (mag, dfi) in enumerate(new_df.groupby("mag")):
    if mag == -1:
        continue
    axi = ax
    # axi = ax[idx]
    x, y = dfi.iloc[0].coeffs[:, [1, 3]].T
    for jdx, xi in enumerate(x):
        if xi >= y[jdx]:
            tmp = xi
            x[jdx] = y[jdx]
            y[jdx] = tmp
    axi.scatter(y, x, color = colors[idx], label = round(mag, 2),
                s = 5)

xymin = np.stack(new_df.coeffs)[..., [1, 3]].reshape(-1, 2).min(0)
xymax = np.stack(new_df.coeffs)[..., [1, 3]].reshape(-1, 2).max(0)


x = np.linspace(xymin[1], xymax[1])
axi.plot(x, x, color = 'k', linestyle = "dashed", alpha = 0.2)
# axi.axline(xymin, xymax, color = 'k', linestyle = "dashed", alpha = 0.2)
scale = "log"
ax.set_yscale(scale)
ax.set_xscale(scale)
ax.legend(loc = 'r', ncols = 2, title = "System magnetization M(S)")
xl = "Exponent 1"
yl = "Exponent 2"
ax.format(xlabel = xl, ylabel = yl)
fig.savefig(f"./figures/{p.name}_exponent_plot_exact.png")
#+end_src

#+RESULTS:
:RESULTS:
#+attr_org: :width 510 :height 305
[[file:./.ob-jupyter/010d046060ba3ec59420d54c5d0081655835218b.png]]
:END:

# cumulative plot with imi
#+begin_src jupyter-python
import proplot as plt
imi = np.stack(new_df.imi)
mag = np.stack(new_df.mag)

fig, ax = plt.subplots()
colors = ccolors(len(imi.T))
for c, node in zip(colors, imi[1:].T):
    ax.scatter(mag[1:], node, color = c, alpha = 1)
ax.format(xlabel =  "System magnetization $M(S)$", ylabel = "Integrated mutual information (IMI)")
fig.show()
#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_239171/1793162586.py:10: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
#+attr_org: :width 319 :height 313
[[file:./.ob-jupyter/988eee76badd1ad9ca2005f062724f7b7148e0a9.png]]
:END:

#+begin_src jupyter-python
print(nx.florentine_families_graph())

2**15
#+end_src

#+RESULTS:
:RESULTS:
: Graph with 15 nodes and 20 edges
: 32768
:END:



#+begin_src jupyter-python
mag = df.mag.unique()
N =  df.mag.unique().size
print(mag)

layout = np.arange(0, mag.size , dtype = int) + 1

layout = np.zeros((2, 7))
layout[0] = [1, 2, 3, 4, 5, 6, 7]
layout[1] = [1, 12, 11, 10, 9, 8, 7]


# tmp = np.zeros((3,4))
# tmp.flat[:layout.size] = layout
# layout = tmp.reshape(3,4)
# layout = layout.reshape(3,4)

fig = pplt.figure(sharey = True)
ax = fig.add_subplots(layout)
# yl = "$I(s_i^t ; S)$"
xl = "Exponent 1"
from utils import ccolors
n = len(g)
colors = ccolors(n)
# scale = "log"
for idx, (mag, dfi) in enumerate(new_df.groupby("mag")):
    try:
        # mi = dfi.nodes.iloc[0]
        half = dfi.half.iloc[0]
        asymp = dfi.asymp.iloc[0]
        imi = dfi.imi.iloc[0]
        coeffs = dfi.coeffs.iloc[0]
        for node in range(n):
            x, y = half[node], asymp[node]
            # x, y = half[node], imi[node]
            ax[idx].scatter(x, y, colors = colors[node])

        yl = "asymp"
        ax[idx].set_xlabel("halftime")
        ax[idx].set_ylabel(yl)
        ax[idx].set_title(round(mag, 2))
        # ax[idx].set_xlim(0, 30)
        # ax[idx].set_ylim(0, 1.1)
        # ax[idx].set_yscale(scale)
        # ax[idx].set_xscale(scale)

        # if mag != -1:
        #     mi = df[ np.round(df.mag,2) == np.round((1-mag), 2)].nodes.iloc[0]
        #     for node in range(n):
        #         ax[idx].plot(mi[:, node], colors = colors[node], linestyle = 'dashed')

    except Exception  as e:
        print(e)
        continue
inax = ax[0, -1].inset_axes((0.5, 0.5, 0.5, 0.5), zoom = False)
nx.draw(g, pos = nx.spring_layout(g), ax = inax, node_color = colors)
fig.savefig(f"./figures/{p.name}_exponent_mag.png")
#+end_src

#+RESULTS:
:RESULTS:
: [-1.   0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1. ]
#+attr_org: :width 1993 :height 323
[[file:./.ob-jupyter/41e6ce43a96a237d0cf497b7c7ef7899f0e46dbc.png]]
:END:




#+begin_src jupyter-python
from scipy.stats import sem
m = models.Potts(g)
binds = {}
for node in g.nodes():
    deg = g.degree(node)
    binds[deg] = binds.get(deg, []) + [node]

# imi_deg = {}
# mags = []
# info = []
# for mag, dfi in new_df.groupby("mag"):
#     mags.append(mag)
#     print(dfi.half.shape)
#     imi = np.stack(dfi.imi).squeeze()
#     tmp = []
#     # for k, v in binds.items():
#         # mu = imi[v].mean()
#         # e  = sem(imi[v])
#         # tmp.append((mu, e))
#     # info.append([tmp])
    # info.append([imi])

mags = np.array(new_df.mag.unique())
info = np.array(info).reshape(mags.size, -1)

print(info.shape)
colors = ccolors(info.shape[1])
fig, ax = plt.subplots()
for node, (c, i) in enumerate(zip(colors, info.T)):
    ax.scatter(mags, i, color = c, label = g.degree(node))
ax.set_xlim(0, 1)
ax.legend(title = "Degree")
ax.set_ylabel("Integrated mutual information")
ax.set_xlabel("System magnetization $M(S)$")
fig.show()

#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Input In [39], in <cell line: 24>()
      8 # imi_deg = {}
      9 # mags = []
     10 # info = []
   (...)
     20 #     # info.append([tmp])
     21     # info.append([imi])
     23 mags = np.array(new_df.mag.unique())
---> 24 info = np.array(info).reshape(mags.size, -1)
     26 print(info.shape)
     27 colors = ccolors(info.shape[1])

NameError: name 'info' is not defined
#+end_example
:END:

#+begin_src jupyter-python
half = np.stack(new_df.half)
asymp = np.stack(new_df.asymp)
mags = np.array(new_df.mag.unique())
colors = ccolors(mags.size)
fig, ax = pplt.subplots()
for mag, c, x, y in zip(mags, colors, half, asymp):
    ax.scatter(x, y, color = c, label = mag)
ax.set_xscale("log")
ax.set_yscale("log")
ax.legend(loc = 'r', ncols = 1, title = "M(S)")
ax.set_xlabel("Half time")
ax.set_ylabel("Asymptotic information")
fig.show()


np.stack(new_df.half).shape
#+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_792043/3259361580.py:13: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
| 12 | 10 |
#+attr_org: :width 520 :height 300
[[file:./.ob-jupyter/0161006312df240ec668b9ccf05b09b45f157dea.png]]
:END:
